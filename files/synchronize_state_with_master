#!/bin/python

import os;

SLAVE_USER = "slave_user";
SLAVE_PASSWORD = "slave_user";
CLUSTER_MEMBER_CONFIG = "/etc/sysconfig/mysqlCluster";
DATABASES_CONFIG = "/etc/sysconfig/mysql";

def configureSlaveForReplication():
	if doesThisNodeBelongToCluster():
		stopSlave();
		importDatabaseDumps();
		setMaster();
		startSlave();
	else:
		stopSlave();

#TESTED
def importDatabaseDumps():
	databaseNames = getEntriesInConfigFile("hasdb", DATABASES_CONFIG);
	for database in databaseNames:
		createDbCommand = "CREATE DATABASE IF NOT EXISTS " + database + ";";
		executeCommandInMysqlShell(createDbCommand);
		importDumpCommand = "mysql -u root " + database + " < /tmp/" + database + ".sql";
		os.popen(importDumpCommand);

def setMaster():
	masterIp = getEntryInConfigFile("master", CLUSTER_MEMBER_CONFIG);
	positionInBinLog = getPositionInBinLog();
	binLogFileName = getBinLogFileName();
	command = "CHANGE MASTER TO MASTER_HOST='" + masterIp  + "',"; 
	command += "MASTER_USER='" + SLAVE_USER + "',";
	command += "MASTER_PASSWORD='" + SLAVE_PASSWORD + "',"; 
	command += "MASTER_LOG_FILE='" + binLogFileName  + "',"; 
	command += "MASTER_LOG_POS=" + positionInBinLog + ";";
	executeCommandInMysqlShell(command);

#TESTED
def startSlave():
	executeCommandInMysqlShell("START SLAVE");

def stopSlave():
	executeCommandInMysqlShell("STOP SLAVE");

#TESTED
def executeCommandInMysqlShell(mysqlCommand):
	shellCommand = "/usr/bin/mysql -uroot -s -e \"" + mysqlCommand  + "\"";
	return os.popen(shellCommand).read();

#TESTED
def getEntriesInConfigFile(label, pathToConfigFile):
	filestream = open(pathToConfigFile,"r");
	result = set();
	for line in filestream:
		if (line.find(label) != -1):
			line = line.strip("\n ");
			resultItem = line.split(" ")[1];
			resultItem = resultItem.strip(" ");
			result.add(resultItem);
	filestream.close();
	return result;

def getEntryInConfigFile(label, pathToConfigFile):
	entries = getEntriesInConfigFile(label, pathToConfigFile);
	if len(entries) < 1:
		raise "No entry found in config file " + pathToConfigFile;
	if len(entries) > 1:
		raise "More than one entry found in config file: ", entries;
	return entries.pop();

#TESTED
def getBinLogFileName():
	return getMasterStatus(0);
	
#TESTED
def getPositionInBinLog():
	return getMasterStatus(1);

# File Fomat: <<binLogFileName>> + & <<positionInBinLog>>
def getMasterStatus(part):
	filestream = open("/tmp/master_status","r");
	line = filestream.readline();
	line = line.split("&")[part];
	line = line.strip("\n ");
	filestream.close();
	return line;

def isSlaveRunning():
	commandResult = executeCommandInMysqlShell("SHOW SLAVE STATUS\G");
	if(commandResult.find("Slave_IO_Running: Yes") != -1 and commandResult.find("Slave_SQL_Running: Yes") != -1):
		return True;
	return False;

def doesThisNodeBelongToCluster():
	slaves = getEntriesInConfigFile("slave", CLUSTER_MEMBER_CONFIG);
	thisNode = getEntryInConfigFile("self", CLUSTER_MEMBER_CONFIG);
	return doesSetContainEntry(slaves, thisNode);

def doesSetContainEntry(aSet, entry):
	entryAsSet = set([entry]);
	intersectionOfSets = aSet.intersection(entryAsSet);
	return len(intersectionOfSets) != 0;

configureSlaveForReplication();